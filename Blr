local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

-- Services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")

-- Local Player
local Player = Players.LocalPlayer
local Character = Player.Character or Player.CharacterAdded:Wait()
local Humanoid = Character:WaitForChild("Humanoid")
local HumanoidRootPart = Character:WaitForChild("HumanoidRootPart")

-- Track character changes
Player.CharacterAdded:Connect(function(newChar)
    Character = newChar
    Humanoid = newChar:WaitForChild("Humanoid")
    HumanoidRootPart = newChar:WaitForChild("HumanoidRootPart")
    
    -- Reapply modifications if toggles are active
    if SpeedToggle and SpeedToggle.CurrentValue then
        Humanoid.WalkSpeed = 100
    end
    if JumpToggle and JumpToggle.CurrentValue then
        Humanoid.JumpPower = 150
    end
    if FlyToggle and FlyToggle.CurrentValue then
        EnableFly()
    end
end)

-- Fly Variables
local Flying = false
local FlySpeed = 50
local FlyControls = {
    Forward = false,
    Backward = false,
    Left = false,
    Right = false,
    Up = false,
    Down = false
}

-- Function to enable flying
local function EnableFly()
    Flying = true
    Humanoid.PlatformStand = true
    
    -- Create body velocity if it doesn't exist
    if not HumanoidRootPart:FindFirstChild("FlyVelocity") then
        local BV = Instance.new("BodyVelocity", HumanoidRootPart)
        BV.Name = "FlyVelocity"
        BV.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
        BV.Velocity = Vector3.new(0, 0, 0)
    end
    
    -- Input connections for fly controls
    local FlyForwardConnection
    local FlyBackwardConnection
    local FlyLeftConnection
    local FlyRightConnection
    local FlyUpConnection
    local FlyDownConnection
    
    FlyForwardConnection = UserInputService.InputBegan:Connect(function(input, gameProcessed)
        if input.KeyCode == Enum.KeyCode.W then
            FlyControls.Forward = true
        end
    end)
    
    FlyBackwardConnection = UserInputService.InputEnded:Connect(function(input, gameProcessed)
        if input.KeyCode == Enum.KeyCode.W then
            FlyControls.Forward = false
        elseif input.KeyCode == Enum.KeyCode.S then
            FlyControls.Backward = false
        elseif input.KeyCode == Enum.KeyCode.A then
            FlyControls.Left = false
        elseif input.KeyCode == Enum.KeyCode.D then
            FlyControls.Right = false
        elseif input.KeyCode == Enum.KeyCode.Space then
            FlyControls.Up = false
        elseif input.KeyCode == Enum.KeyCode.LeftShift then
            FlyControls.Down = false
        end
    end)
    
    -- Fly movement loop
    local FlyConnection = RunService.Heartbeat:Connect(function()
        if Flying and HumanoidRootPart and HumanoidRootPart:FindFirstChild("FlyVelocity") then
            local BV = HumanoidRootPart.FlyVelocity
            local CF = HumanoidRootPart.CFrame
            
            -- Calculate movement direction
            local direction = Vector3.new(
                (FlyControls.Right and 1 or 0) - (FlyControls.Left and 1 or 0),
                (FlyControls.Up and 1 or 0) - (FlyControls.Down and 1 or 0),
                (FlyControls.Backward and 1 or 0) - (FlyControls.Forward and 1 or 0)
            )
            
            -- Apply movement
            if direction.Magnitude > 0 then
                direction = CF:VectorToWorldSpace(direction.Unit * FlySpeed)
            end
            BV.Velocity = direction
        end
    end)
    
    -- Cleanup function
    return function()
        Flying = false
        if Humanoid then
            Humanoid.PlatformStand = false
        end
        if HumanoidRootPart and HumanoidRootPart:FindFirstChild("FlyVelocity") then
            HumanoidRootPart.FlyVelocity:Destroy()
        end
        if FlyConnection then
            FlyConnection:Disconnect()
        end
        if FlyForwardConnection then
            FlyForwardConnection:Disconnect()
        end
        if FlyBackwardConnection then
            FlyBackwardConnection:Disconnect()
        end
    end
end

-- Window Creation
local Window = Rayfield:CreateWindow({
    Name = "Blue Lock Rivals âš½",
    LoadingTitle = "Blue Lock Rivals",
    LoadingSubtitle = "Script loaded successfully!",
    ConfigurationSaving = {
        Enabled = true,
        FolderName = "BlueLockRivals",
        FileName = "Config"
    },
    Discord = {
        Enabled = false,
        Invite = "noinvitelink"
    }
})

-- Main Tab
local MainTab = Window:CreateTab("Main Features", 4483362458)

-- Player Section
local PlayerSection = MainTab:CreateSection("Player Modifications")

local SpeedToggle = MainTab:CreateToggle({
    Name = "Super Speed (100 studs/s)",
    CurrentValue = false,
    Flag = "SpeedToggle",
    Callback = function(Value)
        if Humanoid then
            Humanoid.WalkSpeed = Value and 100 or 16
        end
    end,
})

local JumpToggle = MainTab:CreateToggle({
    Name = "Super Jump (150 power)",
    CurrentValue = false,
    Flag = "JumpToggle",
    Callback = function(Value)
        if Humanoid then
            Humanoid.JumpPower = Value and 150 or 50
        end
    end,
})

-- Fly Toggle
local FlyToggle = MainTab:CreateToggle({
    Name = "Fly (WASD + Space/Shift)",
    CurrentValue = false,
    Flag = "FlyToggle",
    Callback = function(Value)
        if Value then
            local cleanup = EnableFly()
            Rayfield:Notify({
                Title = "Fly Enabled",
                Content = "Use WASD to move, Space to go up, Shift to go down",
                Duration = 5,
            })
            
            -- Store cleanup function for later
            FlyToggle.Cleanup = cleanup
        else
            if FlyToggle.Cleanup then
                FlyToggle.Cleanup()
            end
            Rayfield:Notify({
                Title = "Fly Disabled",
                Content = "Flying has been turned off",
                Duration = 3,
            })
        end
    end,
})

-- Fly Speed Slider
local FlySpeedSlider = MainTab:CreateSlider({
    Name = "Fly Speed",
    Range = {20, 200},
    Increment = 5,
    Suffix = " studs/s",
    CurrentValue = 50,
    Flag = "FlySpeed",
    Callback = function(Value)
        FlySpeed = Value
    end,
})

-- NoClip Implementation
local NoclipToggle = MainTab:CreateToggle({
    Name = "NoClip (Walk through walls)",
    CurrentValue = false,
    Flag = "NoclipToggle",
    Callback = function(Value)
        if Value then
            -- Enable NoClip
            NoclipConnection = RunService.Stepped:Connect(function()
                if Character then
                    for _, part in pairs(Character:GetDescendants()) do
                        if part:IsA("BasePart") then
                            part.CanCollide = false
                        end
                    end
                end
            end)
            Rayfield:Notify({
                Title = "NoClip Enabled",
                Content = "You can now walk through objects",
                Duration = 3,
            })
        else
            -- Disable NoClip
            if NoclipConnection then
                NoclipConnection:Disconnect()
            end
            if Character then
                for _, part in pairs(Character:GetDescendants()) do
                    if part:IsA("BasePart") then
                        part.CanCollide = true
                    end
                end
            end
            Rayfield:Notify({
                Title = "NoClip Disabled",
                Content = "Collisions are now normal",
                Duration = 3,
            })
        end
    end,
})

-- Ball Section
local BallSection = MainTab:CreateSection("Ball Control")

local BallSpeedSlider = MainTab:CreateSlider({
    Name = "Ball Speed Multiplier",
    Range = {1, 10},
    Increment = 0.5,
    Suffix = "x",
    CurrentValue = 1,
    Flag = "BallSpeed",
    Callback = function(Value)
        local ball = workspace:FindFirstChild("Ball") or workspace:FindFirstChild("Football")
        if ball then
            local bodyVelocity = ball:FindFirstChildOfClass("BodyVelocity") or Instance.new("BodyVelocity", ball)
            bodyVelocity.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
            bodyVelocity.Velocity = ball.Velocity * Value
        end
    end,
})

-- Teleport Tab
local TeleportTab = Window:CreateTab("Teleport", 4483362458)

local LocationsSection = TeleportTab:CreateSection("Key Locations")

local function SafeTeleport(position)
    if Character and HumanoidRootPart then
        HumanoidRootPart.CFrame = CFrame.new(position)
        return true
    end
    return false
end

local TeleportButtons = {
    {"Spawn", Vector3.new(0, 5, 0)},
    {"Opponent Goal", Vector3.new(100, 5, 0)},
    {"Your Goal", Vector3.new(-100, 5, 0)},
    {"Midfield", Vector3.new(0, 5, 0)}
}

for _, button in pairs(TeleportButtons) do
    TeleportTab:CreateButton({
        Name = "Teleport to " .. button[1],
        Callback = function()
            if SafeTeleport(button[2]) then
                Rayfield:Notify({
                    Title = "Teleported",
                    Content = "Successfully teleported to " .. button[1],
                    Duration = 3,
                })
            else
                Rayfield:Notify({
                    Title = "Teleport Failed",
                    Content = "Could not teleport to " .. button[1],
                    Duration = 3,
                })
            end
        end,
    })
end

-- Settings Tab
local SettingsTab = Window:CreateTab("Settings", 4483362458)

local ConfigSection = SettingsTab:CreateSection("Configuration")

SettingsTab:CreateButton({
    Name = "Save Configuration",
    Callback = function()
        Rayfield:Notify({
            Title = "Settings Saved",
            Content = "Your configuration has been saved",
            Duration = 3,
        })
    end,
})

SettingsTab:CreateButton({
    Name = "Reset Configuration",
    Callback = function()
        -- Reset all toggles and sliders
        if SpeedToggle then SpeedToggle:Set(false) end
        if JumpToggle then JumpToggle:Set(false) end
        if FlyToggle then FlyToggle:Set(false) end
        if NoclipToggle then NoclipToggle:Set(false) end
        if BallSpeedSlider then BallSpeedSlider:Set(1) end
        if FlySpeedSlider then FlySpeedSlider:Set(50) end
        
        Rayfield:Notify({
            Title = "Settings Reset",
            Content = "Your configuration has been reset",
            Duration = 3,
        })
    end,
})

-- Initialization
Rayfield:Notify({
    Title = "Blue Lock Rivals Loaded",
    Content = "Press F9 if you encounter any issues",
    Duration = 6,
})
