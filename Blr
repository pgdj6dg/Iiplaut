-- Blue Lock Rivals Ultimate
local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

-- Services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")

-- Player references
local Player = Players.LocalPlayer
local Character = Player.Character or Player.CharacterAdded:Wait()
local Humanoid = Character:WaitForChild("Humanoid")
local HumanoidRootPart = Character:WaitForChild("HumanoidRootPart")

-- Window Creation
local Window = Rayfield:CreateWindow({
    Name = "Blue Lock Rivals âš½ Ultimate",
    LoadingTitle = "Loading Ultimate Football Hacks...",
    LoadingSubtitle = "by github.com/pgdj6dg",
    ConfigurationSaving = {
        Enabled = true,
        FolderName = "BlueLockRivals",
        FileName = "UltimateConfig"
    },
    Discord = {
        Enabled = false,
        Invite = "noinvitelink"
    }
})

--[[ CORE FUNCTIONS ]]--
local function FindBall()
    for _, obj in pairs(workspace:GetChildren()) do
        if (obj.Name:lower():find("ball") or obj.Name:lower():find("soccer")) and obj:IsA("BasePart") then
            return obj
        end
    end
    return nil
end

--[[ FLY SYSTEM ]]--
local FlyEnabled = false
local FlySpeed = 50
local FlyControls = {}
local FlyConnection

local function UpdateFly()
    if not FlyEnabled or not HumanoidRootPart then return end
    
    local direction = Vector3.new(
        (FlyControls.Right and 1 or 0) - (FlyControls.Left and 1 or 0),
        (FlyControls.Up and 1 or 0) - (FlyControls.Down and 1 or 0),
        (FlyControls.Backward and 1 or 0) - (FlyControls.Forward and 1 or 0)
    )
    
    if direction.Magnitude > 0 then
        direction = HumanoidRootPart.CFrame:VectorToWorldSpace(direction.Unit * FlySpeed)
    end
    
    HumanoidRootPart.Velocity = direction
    Humanoid.PlatformStand = true
end

--[[ NOCLIP SYSTEM ]]--
local NoclipEnabled = false
local NoclipConnection

local function UpdateNoclip()
    if not NoclipEnabled or not Character then return end
    for _, part in pairs(Character:GetDescendants()) do
        if part:IsA("BasePart") then
            part.CanCollide = false
        end
    end
end

--[[ MAIN TAB ]]--
local MainTab = Window:CreateTab("Main", 4483362458)

-- Player Modifications
MainTab:CreateSection("Player Modifications")

local SpeedSlider = MainTab:CreateSlider({
    Name = "Walk Speed",
    Range = {16, 500},
    Increment = 1,
    Suffix = " studs/s",
    CurrentValue = 16,
    Flag = "WalkSpeed",
    Callback = function(Value)
        if Humanoid then
            Humanoid.WalkSpeed = Value
        end
    end,
})

local JumpSlider = MainTab:CreateSlider({
    Name = "Jump Power",
    Range = {50, 500},
    Increment = 1,
    Suffix = " power",
    CurrentValue = 50,
    Flag = "JumpPower",
    Callback = function(Value)
        if Humanoid then
            Humanoid.JumpPower = Value
        end
    end,
})

-- Fly System
MainTab:CreateToggle({
    Name = "Fly Mode (WASD + Space/Shift)",
    CurrentValue = false,
    Flag = "FlyToggle",
    Callback = function(State)
        FlyEnabled = State
        if FlyEnabled then
            FlyConnection = RunService.Heartbeat:Connect(UpdateFly)
            -- Set up controls
            UserInputService.InputBegan:Connect(function(input)
                if input.KeyCode == Enum.KeyCode.W then FlyControls.Forward = true end
                if input.KeyCode == Enum.KeyCode.S then FlyControls.Backward = true end
                if input.KeyCode == Enum.KeyCode.A then FlyControls.Left = true end
                if input.KeyCode == Enum.KeyCode.D then FlyControls.Right = true end
                if input.KeyCode == Enum.KeyCode.Space then FlyControls.Up = true end
                if input.KeyCode == Enum.KeyCode.LeftShift then FlyControls.Down = true end
            end)
            
            UserInputService.InputEnded:Connect(function(input)
                if input.KeyCode == Enum.KeyCode.W then FlyControls.Forward = false end
                if input.KeyCode == Enum.KeyCode.S then FlyControls.Backward = false end
                if input.KeyCode == Enum.KeyCode.A then FlyControls.Left = false end
                if input.KeyCode == Enum.KeyCode.D then FlyControls.Right = false end
                if input.KeyCode == Enum.KeyCode.Space then FlyControls.Up = false end
                if input.KeyCode == Enum.KeyCode.LeftShift then FlyControls.Down = false end
            end)
        else
            if FlyConnection then FlyConnection:Disconnect() end
            if Humanoid then Humanoid.PlatformStand = false end
            if HumanoidRootPart then HumanoidRootPart.Velocity = Vector3.new() end
        end
    end,
})

MainTab:CreateSlider({
    Name = "Fly Speed",
    Range = {20, 500},
    Increment = 5,
    Suffix = " studs/s",
    CurrentValue = 50,
    Flag = "FlySpeed",
    Callback = function(Value)
        FlySpeed = Value
    end,
})

-- NoClip
MainTab:CreateToggle({
    Name = "NoClip Mode",
    CurrentValue = false,
    Flag = "NoclipToggle",
    Callback = function(State)
        NoclipEnabled = State
        if NoclipEnabled then
            NoclipConnection = RunService.Stepped:Connect(UpdateNoclip)
        else
            if NoclipConnection then NoclipConnection:Disconnect() end
        end
    end,
})

--[[ BALL CONTROL TAB ]]--
local BallTab = Window:CreateTab("Ball Control", 4483362458)

BallTab:CreateButton({
    Name = "Bring Ball To Player",
    Callback = function()
        local ball = FindBall()
        if ball and HumanoidRootPart then
            -- Remove old constraints
            for _, v in pairs(ball:GetChildren()) do
                if v:IsA("BodyPosition") or v:IsA("BodyGyro") then
                    v:Destroy()
                end
            end
            
            -- Create new constraints
            local pos = Instance.new("BodyPosition", ball)
            pos.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
            pos.Position = HumanoidRootPart.Position + (HumanoidRootPart.CFrame.LookVector * 5) + Vector3.new(0, 3, 0)
            
            local gyro = Instance.new("BodyGyro", ball)
            gyro.MaxTorque = Vector3.new(math.huge, math.huge, math.huge)
            
            Rayfield:Notify({
                Title = "Ball Attracted",
                Content = "The ball is coming to you!",
                Duration = 3,
            })
        else
            Rayfield:Notify({
                Title = "Error",
                Content = "No ball found or character issue",
                Duration = 3,
            })
        end
    end,
})

BallTab:CreateSlider({
    Name = "Ball Speed Multiplier",
    Range = {0.1, 10},
    Increment = 0.1,
    Suffix = "x",
    CurrentValue = 1,
    Flag = "BallSpeed",
    Callback = function(Value)
        local ball = FindBall()
        if ball then
            local vel = ball:FindFirstChildOfClass("BodyVelocity") or Instance.new("BodyVelocity", ball)
            vel.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
            vel.Velocity = ball.Velocity * Value
        end
    end,
})

BallTab:CreateToggle({
    Name = "Disable Ball Gravity",
    CurrentValue = false,
    Flag = "BallGravity",
    Callback = function(Value)
        local ball = FindBall()
        if ball then
            local force = ball:FindFirstChildOfClass("BodyForce") or Instance.new("BodyForce", ball)
            force.Force = Value and Vector3.new(0, ball:GetMass() * workspace.Gravity, 0) or Vector3.new(0, 0, 0)
        end
    end,
})

--[[ TELEPORT TAB ]]--
local TeleportTab = Window:CreateTab("Teleport", 4483362458)

-- Teleport to Players
TeleportTab:CreateSection("Teleport to Players")

for _, player in pairs(Players:GetPlayers()) do
    if player ~= Player then
        TeleportTab:CreateButton({
            Name = "TP to "..player.Name,
            Callback = function()
                if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                    HumanoidRootPart.CFrame = player.Character.HumanoidRootPart.CFrame * CFrame.new(0, 0, -3)
                    Rayfield:Notify({
                        Title = "Teleported",
                        Content = "Teleported to "..player.Name,
                        Duration = 3,
                    })
                end
            end,
        })
    end
end

-- Teleport to Locations
TeleportTab:CreateSection("Teleport to Locations")

local Locations = {
    {"Spawn", Vector3.new(0, 5, 0)},
    {"Opponent Goal", Vector3.new(100, 5, 0)},
    {"Your Goal", Vector3.new(-100, 5, 0)},
    {"Midfield", Vector3.new(0, 5, 0)}
}

for _, location in pairs(Locations) do
    TeleportTab:CreateButton({
        Name = "TP to "..location[1],
        Callback = function()
            HumanoidRootPart.CFrame = CFrame.new(location[2])
            Rayfield:Notify({
                Title = "Teleported",
                Content = "Teleported to "..location[1],
                Duration = 3,
            })
        end,
    })
end

--[[ BYPASS TAB ]]--
local BypassTab = Window:CreateTab("Bypasses", 4483362458)

BypassTab:CreateSection("Anti-Detection")

BypassTab:CreateButton({
    Name = "Enable Speed Bypass",
    Callback = function()
        local oldIndex
        oldIndex = hookmetamethod(game, "__index", function(self, idx)
            if tostring(self) == "Humanoid" and idx == "WalkSpeed" then
                return 16
            end
            return oldIndex(self, idx)
        end
        Rayfield:Notify({
            Title = "Bypass Enabled",
            Content = "Speed hacks should now be undetectable",
            Duration = 5,
        })
    end,
})

BypassTab:CreateButton({
    Name = "Enable Jump Bypass",
    Callback = function()
        local oldIndex
        oldIndex = hookmetamethod(game, "__index", function(self, idx)
            if tostring(self) == "Humanoid" and idx == "JumpPower" then
                return 50
            end
            return oldIndex(self, idx)
        end
        Rayfield:Notify({
            Title = "Bypass Enabled",
            Content = "Jump hacks should now be undetectable",
            Duration = 5,
        })
    end,
})

-- Character tracking
Player.CharacterAdded:Connect(function(newChar)
    Character = newChar
    Humanoid = newChar:WaitForChild("Humanoid")
    HumanoidRootPart = newChar:WaitForChild("HumanoidRootPart")
    
    -- Reapply modifications
    Humanoid.WalkSpeed = SpeedSlider.CurrentValue
    Humanoid.JumpPower = JumpSlider.CurrentValue
    
    if FlyEnabled then
        FlyConnection = RunService.Heartbeat:Connect(UpdateFly)
    end
    if NoclipEnabled then
        NoclipConnection = RunService.Stepped:Connect(UpdateNoclip)
    end
end)

-- Initialization
Rayfield:Notify({
    Title = "Blue Lock Rivals Loaded",
    Content = "All features are now available!",
    Duration = 5,
})
